---
HED:
  name: HED
  display_name: HED Tag
  description: |
    Hierarchical Event Descriptor (HED) Tag.
    See the [HED Appendix](SPEC_ROOT/appendices/hed.md) for details.
  type: string
abbreviation:
  name: abbreviation
  display_name: Abbreviation
  description: |
    The unique label abbreviation
  type: string
acq_time__scans:
  name: acq_time
  display_name: Scan acquisition time
  description: |
    Acquisition time refers to when the first data point in each run was acquired.
    Furthermore, if this header is provided, the acquisition times of all files
    from the same recording MUST be identical.
    Datetime format and their anonymization are described in
    [Units](SPEC_ROOT/common-principles.md#units).
  type: string
  format: datetime
acq_time__sessions:
  name: acq_time
  display_name: Session acquisition time
  description: |
    Acquisition time refers to when the first data point of the first run was acquired.
    Datetime format and their anonymization are described in
    [Units](SPEC_ROOT/common-principles.md#units).
  type: string
  format: datetime
age:
  name: age
  display_name: Subject age
  description: |
    Numeric value in years (float or integer value).

    It is recommended to tag participant ages that are 89 or higher as 89+,
    for privacy purposes.
  type: number
  unit: year
alpha_rotation:
  name: alpha_rotation
  display_name: Alpha rotation
  description: |
    Euler angle to match probe extension dimensions (width, height, depth) to global x, y, z coordinates.
  unit: degree
associated_brain_region:
  name: associated_brain_region
  display_name: Associated brain region
  description: |
    A textual indication on the location of the probe,
    preferably species-independent terms as obtained, for example from Uberon.
  type: string
associated_brain_region_id:
  name: associated_uberon_brain_region_id
  display_name: Associated brain region identifier
  description: |
    An identifier of the associated brain region based on the Uberon ontology
    for anatomical structures in animals, for example "UBERON:0010415"
  type: number
associated_brain_region_quality_type:
  name: associated_brain_region_quality_type
  display_name: Associated brain region quality type
  description: |
    The method used to identify the associated brain region (estimated|proof)
    depending on anatomical pictures proofing the location or indirect estimation of the location.
  type: string
beta_rotation:
  name: beta_rotation
  display_name: Beta rotation
  description: |
    Euler angle to match probe extension dimensions (width, height, depth) to global x, y, z coordinates.
  unit: degree
cardiac:
  name: cardiac
  display_name: Cardiac measurement
  description: |
    continuous pulse measurement
  type: number
channel:
  name: channel
  display_name: Channel
  description: |
    Channel(s) associated with an event.
    If multiple channels are specified, they MUST be separated by a delimiter
    specified in the `"Delimiter"` field describing the `channel` column.
    For example, channels separated with a comma (`,`) require the `events.json`
    file to contain `"channel": {"Delimiter": ","}`.
    In the absence of a delimiter, tools MUST interpret any character as being part
    of a channel name.
  type: string
channel_id:
  name: channel_id
  display_name: Channel ID
  description: |
    Unique identifier of the channel, only containing letters and numbers.
    This id must be reflected in the data files, for example, as signal annotations in the nix file.
    When inserting existing nwb files into a BIDS structure, one can combine
    the nwb record_id and channel_index to create this unique identifier.
  type: string
  pattern: ^[0-9a-zA-Z]+$
channel_label:
  name: channel_label
  display_name: Channel label
  description: |
    Human readable identifier. Use this name to specify the
    content of signals not generated by electrodes. For example,
    'DAQ internal synchronization signals', 'behavioral signals', 'behavioral cues', etc.
  type: string
color:
  name: color
  display_name: Color label
  description: |
    Hexadecimal. Label color for visualization.
  type: string
  unit: hexadecimal
component:
  name: component
  display_name: Component
  description: |
    Description of the spatial axis or label of quaternion component associated with the channel.
    For example, `x`,`y`,`z` for position channels,
    or `quat_x`, `quat_y`, `quat_z`, `quat_w` for quaternion orientation channels.
  type: string
  enum:
    - $ref: objects.enums.x.value
    - $ref: objects.enums.y.value
    - $ref: objects.enums.z.value
    - $ref: objects.enums.quat_x.value
    - $ref: objects.enums.quat_y.value
    - $ref: objects.enums.quat_z.value
    - $ref: objects.enums.quat_w.value
    - n/a
contact_count:
  name: contact_count
  display_name: Contact count
  description: |
    Number of miscellaneous analog contacts for auxiliary signals.
  type: number
coordinate_reference_point:
  name: coordinate_reference_point
  display_name: Coordinate reference point
  description: |
    Point of the probe that is described by the probe coordinates and
    on which the alpha, beta and gamma rotations are applied.
  type: string
data_entity_id:
  name: data_entity_id
  display_name: Data entity ID
  description: |
    The corresponding (UUID) identifier of the recording trace in the data file.
    The same `data_entity_id` can be listed multiple times with different
    `onset` and `duration` values to select a subset of a recording trace.
  type: string
depth__probes:
  name: depth
  display_name: Depth
  description: |
    Physical depth of the probe, for example, '0.3'.
    This dimension should be omitted or set to 0 for two-dimensional (shank-type) probes.
    This dimension corresponds to the zâ€™axis of the Euler transformation defined by
    alpha, beta and gamma rotations values.
  type: number
detector__channels:
  name: detector
  display_name: Detector Name
  description: |
    Name of the detector as specified in the `*_optodes.tsv` file.
    `n/a` for channels that do not contain NIRS signals (for example, acceleration).
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
detector_type:
  name: detector_type
  display_name: Detector Type
  description: |
    The type of detector. Only to be used if the field `DetectorType` in `*_nirs.json` is set to `mixed`.
  anyOf:
    - type: string
derived_from:
  name: derived_from
  display_name: Derived from
  description: |
    `sample-<label>` entity from which a sample is derived,
    for example a slice of tissue (`sample-02`) derived from a block of tissue (`sample-01`).
  type: string
  pattern: ^sample-[0-9a-zA-Z]+$
desc_id:
  name: desc_id
  display_name: Description Label
  description: |
    A `desc-<label>` entity present in the derivatives dataset.

    The `desc_id` column contains the labels used with the
    [`desc` entity](SPEC_ROOT/appendices/entities.md#desc),
    within the particular nesting that the `descriptions.tsv` file is placed.

    For example, if the `descriptions.tsv` file is placed at the root of the derivative dataset,
    its `desc_id` column SHOULD contain all labels of the `desc` entity)
    used across the entire derivative dataset.
  type: string
  pattern: ^desc-[0-9a-zA-Z]+$
description:
  name: description
  display_name: Description
  description: |
    Brief free-text description of the channel, or other information of interest.
  type: string
device_serial_number:
  name: device_serial_number
  display_name: Device serial number
  description: |
    The serial number of the probe (provided by the manufacturer).
  type: string
description__optode:
  name: description
  display_name: Description
  description: |
    Free-form text description of the optode, or other information of interest.
  type: string
description__entities:
  name: description
  display_name: Description
  description: |
    Free-form text description of the entity's label (defined in `<entity>_id` column).
  type: string
dimension:
  name: dimension
  display_name: Dimension
  description: |
    Size of the group (grid/strip/probe) that this electrode belongs to.
    Must be of form `[AxB]` with the smallest dimension first (for example, `[1x8]`).
  type: string
# TODO: Add unit enums if everyone agrees to keep this column.
dimension_unit:
  name: dimension_unit
  display_name: Dimension unit
  description: |
    Units of the physical dimensions  'width', 'height' and 'depth' of the probe.
    For example, `mm`.
  type: string
duration:
  name: duration
  display_name: Event duration
  description: |
    Duration of the event (measured from onset) in seconds.
    Must always be either zero or positive (or `n/a` if unavailable).
    A "duration" value of zero implies that the delta function or event is so
    short as to be effectively modeled as an impulse.
  anyOf:
    - type: number
      unit: s
      minimum: 0
    - type: string
      enum:
        - n/a
duration_index:
  name: duration_index
  display_name: Duration index
  description: |
    Number of recording samples included in the event.
  type: number
electrode_count:
  name: electrode_count
  display_name: Electrode count
  description: |
    Number of miscellaneous analog electrodes for auxiliary signals (for example, '2').
  type: number
electrode_id:
  name: electrode_id
  display_name: Electrode ID
  description: |
    A unique identifier of the electrode.
    (expected to match electrode_ids listed in `*_channels.tsv`).
  type: string
electrode_shape:
  name: electrode_shape
  display_name: Electrode shape
  description: |
    Description of the shape of the electrode (for example, `square`, `circle`).
  type: string
filename:
  name: filename
  display_name: Filename
  description: |
    Relative paths to files.
  type: string
  format: participant_relative
# TODO: Figure out and add rule for default values.
gain:
  name: gain
  display_name: Gain
  description: |
    Amplification factor applied from signal detection at the electrode
    to the signal stored in the data file.
    If no gain factor is provided it is assumed to be 1.
  type: number
gamma_rotation:
  name: gamma_rotation
  display_name: Gamma rotation
  description: |
    Euler angle to match probe extension dimensions (width, height, depth) to global x, y, z coordinates.
  unit: degree
# TODO: Clarify if the optionality of the column be defined here or as an addendum in the rules.
ground:
  name: ground
  display_name: Ground
  description: |
    Information on the ground. For example, 'chamber screw', 'head post', 'ear clip'.
    Only should be used to optionally override the global ground in the `_ecephys.json` or `_icephys.json` file.
  type: string
group__channel:
  name: group
  display_name: Channel group
  description: |
    Which group of channels (grid/strip/seeg/depth) this channel belongs to.
    This is relevant because one group has one cable-bundle and noise can be shared.
    This can be a name or number.
  anyOf:
    - type: string
    - type: number
handedness:
  name: handedness
  display_name: Subject handedness
  description: |
    String value indicating one of "left", "right", "ambidextrous".

    For "left", use one of these values: `left`, `l`, `L`, `LEFT`, `Left`.

    For "right", use one of these values: `right`, `r`, `R`, `RIGHT`, `Right`.

    For "ambidextrous", use one of these values: `ambidextrous`, `a`, `A`, `AMBIDEXTROUS`,
    `Ambidextrous`.
  type: string
  # TODO: Add definitions for these values. (perhaps don't specify)
  enum:
    - left
    - l
    - L
    - LEFT
    - Left
    - right
    - r
    - R
    - RIGHT
    - Right
    - ambidextrous
    - a
    - A
    - AMBIDEXTROUS
    - Ambidextrous
    - n/a
hardware_filters:
  name: hardware_filters
  display_name: Hardware filters
  description: |
    List of hardware (amplifier) filter keys applied.
    Note that parameters should be defined in the general microephys sidecar .json file.
    Indicate `n/a` in the absence of hardware filters applied.
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
height__probes:
  name: height
  display_name: Height
  description: |
    Physical height of the probe, for example, '5'.
    This dimension corresponds to the yâ€™axis of the Euler transformation defined by
    alpha, beta and gamma rotations values below.
  type: number
hemisphere:
  name: hemisphere
  display_name: Electrode hemisphere
  description: |
    The hemisphere in which the electrode is placed.
  type: string
  enum:
    - $ref: objects.enums.left_hemisphere.value
    - $ref: objects.enums.right_hemisphere.value
# TODO: Should the hemisphere details be unified for electrodes and probes or will it break other modality?
hemisphere__probes:
  name: hemisphere
  display_name: Hemisphere
  description: |
    Hemisphere in which the probe is placed.
  type: string
  enum:
    - $ref: objects.enums.left_hemisphere.value
    - $ref: objects.enums.right_hemisphere.value
high_cutoff:
  name: high_cutoff
  display_name: High cutoff
  description: |
    Frequencies used for the low-pass filter applied to the channel in Hz.
    If no low-pass filter applied, use `n/a`.
    Note that hardware anti-aliasing in A/D conversion of all MEG/EEG electronics
    applies a low-pass filter; specify its frequency here if applicable.
  anyOf:
    - type: number
      unit: Hz
      minimum: 0
    - type: string
      enum:
        - n/a
hplc_recovery_fractions:
  name: hplc_recovery_fractions
  display_name: HPLC recovery fractions
  description: |
    HPLC recovery fractions (the fraction of activity that gets loaded onto the HPLC).
  type: number
  unit: arbitrary
impedance:
  name: impedance
  display_name: Electrode impedance
  description: |
    Impedance of the electrode, units MUST be in `kOhm`.
  type: number
  unit: kOhm
index:
  name: index
  display_name: Label index
  description: |
    The label integer index.
  type: integer
location:
  name: location
  display_name: Location
  description: |
    An indication on the location of the electrode (for example, `cortical layer 3`, `CA1`).
  type: string
low_cutoff:
  name: low_cutoff
  display_name: Low cutoff
  description: |
    Frequencies used for the high-pass filter applied to the channel in Hz.
    If no high-pass filter applied, use `n/a`.
  anyOf:
    - type: number
      unit: Hz
    - type: string
      enum:
        - n/a
manufacturer:
  name: manufacturer
  display_name: Manufacturer
  description: |
    The manufacturer for each electrode.
    Can be used if electrodes were manufactured by more than one company.
  type: string
# TODO: Should the manufacturer details be unified for electrodes and probes?
manufacturer__probes:
  name: manufacturer
  display_name: Manufacturer
  description: |
    Manufacturer of the probes system  (for example, 'openephys', 'alphaomega','blackrock').
  type: string
mapping:
  name: mapping
  display_name: Label mapping
  description: |
    Corresponding integer label in the standard BIDS label lookup.
  type: integer
material:
  name: material
  display_name: Electrode material
  description: |
    Material of the electrode (for example, `Tin`, `Ag/AgCl`, `Gold`).
  type: string
material__probes:
  name: material__probes
  display_name: Material
  description: |
    A textual description of the base material of the probe.
  type: string
metabolite_parent_fraction:
  name: metabolite_parent_fraction
  display_name: Metabolite parent fraction
  description: |
    Parent fraction of the radiotracer (0-1).
  type: number
  minimum: 0
  maximum: 1
metabolite_polar_fraction:
  name: metabolite_polar_fraction
  display_name: Metabolite polar fraction
  description: |
    Polar metabolite fraction of the radiotracer (0-1).
  type: number
  minimum: 0
  maximum: 1
# name column for channels.tsv files
name__channels:
  name: name
  display_name: Channel name
  description: |
    Label of the channel.
  type: string
# name column for electrodes.tsv files
name__electrodes:
  name: name
  display_name: Electrode name
  description: |
    Name of the electrode contact point.
  type: string
name__optodes:
  name: name
  display_name: Optode name
  description: |
    Name of the optode, must be unique.
  type: string
# name column for dseg.tsv files
name__segmentations:
  name: name
  display_name: Label name
  description: |
    The unique label name.
  type: string
notch:
  name: notch
  display_name: Notch frequencies
  description: |
    Frequencies used for the notch filter applied to the channel, in Hz.
    If notch filters are applied at multiple frequencies,
    these frequencies MAY be specified as a list,
    for example, `[60, 120, 180]`.
    If no notch filter was applied, use `n/a`.
  type: string
onset:
  name: onset
  display_name: Event onset
  description: |
    Onset (in seconds) of the event, measured from the beginning of the acquisition
    of the first data point stored in the corresponding task data file.
    Negative onsets are allowed, to account for events that occur prior to the first
    stored data point.
    For example, in case there is an in-scanner training phase that begins before
    the scanning sequence has started events from this sequence should have
    negative onset time counting down to the beginning of the acquisition of the
    first volume.

    If any data points have been discarded before forming the data file
    (for example, "dummy volumes" in BOLD fMRI),
    a time of 0 corresponds to the first stored data point and not the first
    acquired data point.
  type: number
  unit: s
onset_index:
  name: onset_index
  display_name: Onset index
  description: |
    Index of the onset recording sample (0 based) within the data entity.
  type: integer
pathology:
  name: pathology
  display_name: Pathology
  description: |
    String value describing the pathology of the sample or type of control.
    When different from `healthy`, pathology SHOULD be specified.
    The pathology may be specified in either `samples.tsv` or
    `sessions.tsv`, depending on whether the pathology changes over time.
  type: string
participant_id:
  name: participant_id
  display_name: Participant ID
  description: |
    A participant identifier of the form `sub-<label>`,
    matching a participant entity found in the dataset.
  type: string
  pattern: ^sub-[0-9a-zA-Z]+$
pipette_solution:
  name: pipette_solution
  display_name: Pipette solution
  description: |
    The solution used to fill the pipette.
    See also [openMINDS Pipette]
    (https://github.com/openMetadataInitiative/openMINDS_ephys/blob/v1/schemas/device/pipetteUsage.schema.tpl.json).
  type: string
internal_pipette_diameter:
  name: internal_pipette_diameter
  display_name: Internal pipette diameter
  description: |
    The internal diameter of the pipette in micrometers.
  type: number
  unit: mm
external_pipette_diameter:
  name: external_pipette_diameter
  display_name: External pipette diameter
  description: |
    The external diameter of the pipette in micrometers.
  type: number
  unit: mm
placement__motion:
  name: placement
  display_name: Placement
  description: |
    Placement of the tracked point on the body (for example,
    participant, avatar centroid, torso, left arm).
    It can refer to an external vocabulary for describing body parts.
  type: string
plasma_radioactivity:
  name: plasma_radioactivity
  display_name: Plasma radioactivity
  description: |
    Radioactivity in plasma, in unit of plasma radioactivity (for example, `kBq/mL`).
  type: number
# reference column for channels.tsv files for EEG data
probe_id:
  name: probe_id
  display_name: Probe ID
  description: |
    A unique identifier of the probe, can be identical with the `device_serial_number`.
    (expected to match probe_ids listed in `*_eletrodes.tsv`).
  type: string
recording_mode:
  name: recording_mode
  display_name: Recording mode
  description: |
    The mode of recording for patch clamp datasets (for example, `voltage clamp`, `current clamp`).
  type: string
reference__eeg:
  name: reference
  display_name: Electrode reference
  description: |
    Name of the reference electrode(s).
    This column is not needed when it is common to all channels.
    In that case the reference electrode(s) can be specified in `*_eeg.json` as `EEGReference`).
  type: string
reference__microephys:
  name: reference
  display_name: Reference
  description: |
    Name of the electrode used as physical reference.
    For example, electrode_id, physical location (subdural, chamber screw).
  type: string
# reference column for channels.tsv files for iEEG data
reference__ieeg:
  name: reference
  display_name: Electrode reference
  description: |
    Specification of the reference (for example, `mastoid`, `ElectrodeName01`, `intracranial`, `CAR`, `other`, `n/a`).
    If the channel is not an electrode channel (for example, a microphone channel) use `n/a`.
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
reference_atlas:
  name: reference_atlas
  display_name: Reference atlas
  description: |
    Name of reference atlas used for associated brain region identification,
    preferably an [ebrains supported atlas](https://ebrains.eu/services/atlases#services).
  type: string
reference_frame:
  name: reference_frame
  display_name: Reference frame
  description: |
    Specification of a reference frame in which the motion data are to be interpreted.
    The description of the levels in `*_channels.json` SHOULD use `RotationRule`,
    `RotationOrder`, and `SpatialAxes`, and MAY use `Description` for the specification.
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
respiratory:
  name: respiratory
  display_name: Respiratory measurement
  description: |
    continuous breathing measurement
  type: number
response_time:
  name: response_time
  display_name: Response time
  description: |
    Response time measured in seconds.
    A negative response time can be used to represent preemptive responses and
    `n/a` denotes a missed response.
  anyOf:
    - type: number
      unit: s
    - type: string
      enum:
        - n/a
sample_id:
  name: sample_id
  display_name: Sample ID
  description: |
    A sample identifier of the form `sample-<label>`,
    matching a sample entity found in the dataset.
  type: string
  pattern: ^sample-[0-9a-zA-Z]+$
sample_type:
  name: sample_type
  display_name: Sample type
  description: |
    Biosample type defined by
    [ENCODE Biosample Type](https://www.encodeproject.org/profiles/biosample_type).
  type: string
  enum:
    - $ref: objects.enums.cell_line.value
    - $ref: objects.enums.in_vitro_differentiated_cells.value
    - $ref: objects.enums.primary_cell.value
    - $ref: objects.enums.cell_free_sample.value
    - $ref: objects.enums.cloning_host.value
    - $ref: objects.enums.tissue.value
    - $ref: objects.enums.whole_organisms.value
    - $ref: objects.enums.organoid.value
    - $ref: objects.enums.technical_sample.value
sampling_frequency:
  name: sampling_frequency
  display_name: Channel sampling frequency
  description: |
    Sampling rate of the channel in Hz.
  type: number
  unit: Hz
session_id:
  name: session_id
  display_name: Session ID
  description: |
    A session identifier of the form `ses-<label>`,
    matching a session found in the dataset.
  type: string
  pattern: ^ses-[0-9a-zA-Z]+$
sex:
  name: sex
  display_name: Sex
  description: |
    String value indicating phenotypical sex, one of "male", "female", "other".

    For "male", use one of these values: `male`, `m`, `M`, `MALE`, `Male`.

    For "female", use one of these values: `female`, `f`, `F`, `FEMALE`, `Female`.

    For "other", use one of these values: `other`, `o`, `O`, `OTHER`, `Other`.
  type: string
  # TODO: Add definitions for these values. (perhaps don't specify)
  enum:
    - male
    - m
    - M
    - MALE
    - Male
    - female
    - f
    - F
    - FEMALE
    - Female
    - other
    - o
    - O
    - OTHER
    - Other
    - n/a
shank_id:
  name: shank_id
  display_name: Shank ID
  description: |
    A unique identifier to specify which shank of the probe the electrode is on.
    This is useful for spike sorting when the electrodes are on a multi-shank probe.
  type: string
short_channel:
  name: short_channel
  display_name: Short Channel
  description: |
    Is the channel designated as short.
    The total number of channels listed as short channels
    SHOULD be stored in `ShortChannelCount` in `*_nirs.json`.
  type: boolean
size:
  name: size
  display_name: Electrode size
  description: |
    Surface area of the electrode, units MUST be in `mm^2`.
  type: number
  unit: 'mm^2'
software_filters:
  name: software_filters
  display_name: Software filters
  description: |
    List of temporal and/or spatial software filters applied
    (for example, `SSS`, `SpatialCompensation`).
    Note that parameters should be defined in the general MEG sidecar .json file.
    Indicate `n/a` in the absence of software filters applied.
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
# TODO: This seems very confusing. Should be merge with the column above?
software_filters__channels:
  name: software_filters
  display_name: Software filters
  description: |
    List of temporal and/or spatial software filters applied
    (for example, `SSS`, `SpatialCompensation`).
    Note that parameters should be defined in the general microephys sidecar .json file.
    Indicate `n/a` in the absence of software filters applied.
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
source__channels:
  name: source
  display_name: Source name
  description: |
    Name of the source as specified in the `*_optodes.tsv` file.
    `n/a` for channels that do not contain fNIRS signals (for example, acceleration).
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
source__optodes:
  name: source_type
  display_name: Source type
  description: |
    The type of source. Only to be used if the field `SourceType` in `*_nirs.json` is set to `mixed`.
  anyOf:
    - type: string
species:
  name: species
  display_name: Species
  description: |
    The `species` column SHOULD be a binomial species name from the
    [NCBI Taxonomy](https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi)
    (for example, `homo sapiens`, `mus musculus`, `rattus norvegicus`).
    For backwards compatibility, if `species` is absent, the participant is assumed to be
    `homo sapiens`.
  type: string
status:
  name: status
  display_name: Channel status
  description: |
    Data quality observed on the channel.
    A channel is considered `bad` if its data quality is compromised by excessive noise.
    If quality is unknown, then a value of `n/a` may be used.
    Description of noise type SHOULD be provided in `[status_description]`.
  type: string
  enum:
    - $ref: objects.enums.good.value
    - $ref: objects.enums.bad.value
    - n/a
status_description:
  name: status_description
  display_name: Channel status description
  description: |
    Freeform text description of noise or artifact affecting data quality on the channel.
    It is meant to explain why the channel was declared bad in the `status` column.
  type: string
stim_file:
  name: stim_file
  display_name: Stimulus file
  description: |
    Represents the location of the stimulus file (such as an image, video, or
    audio file) presented at the given onset time.
    There are no restrictions on the file formats of the stimuli files,
    but they should be stored in the `/stimuli` directory
    (under the root directory of the dataset; with optional subdirectories).
    The values under the `stim_file` column correspond to a path relative to
    `/stimuli`.
    For example `images/cat03.jpg` will be translated to `/stimuli/images/cat03.jpg`.
  type: string
  format: stimuli_relative
strain:
  name: strain
  display_name: Strain
  description: |
    For species different from `homo sapiens`, string value indicating
    the strain of the species, for example: `C57BL/6J`.
  type: string
strain_rrid:
  name: strain_rrid
  display_name: Strain RRID
  description: |
    For species different from `homo sapiens`, research resource identifier
    ([RRID](https://scicrunch.org/resources/data/source/nlx_154697-1/search))
    of the strain of the species, for example: `RRID:IMSR_JAX:000664`.
  type: string
  format: rrid
stream_id:
  name: stream_id
  display_name: Stream ID
  description: |
    Data stream of the recording the signal.
  type: string
# TODO: Clarify if column values can be arrays.
surgery_date:
  name: surgery_date
  display_name: Surgery date
  description: |
    Date(s) of surgery. Datetime format and their anonymization
    are described in [Units](SPEC_ROOT/common-principles.md#units).
    The details of the surgery should be described in the sidecar json file.
  type: string
  format: datetime
time:
  name: time
  display_name: Time
  description: |
    Time, in seconds, relative to `TimeZero` defined by the `*_pet.json`.
    For example, 5.
  type: number
  unit: s
time_offset:
  name: time_offset
  display_name: Time offset
  description: |
    Time shift between signal of this channel to a reference channel in seconds.
  type: number
  unit: s
time_reference_channel:
  name: time_reference_channel
  display_name: Time reference channel
  description: |
    Name of the channel that is used for time alignment of signals.
  type: string
tracked_point__channels:
  name: tracked_point
  display_name: Tracked point channel
  description: |
    Label of the point that is being tracked, for example, label of a tracker
    or a marker (for example,`"LeftFoot"`, `"RightWrist"`).
  type: string
# TODO: Add relative links to `trial_type` column and events.tsv description.
trial_id:
  name: trial_id
  display_name: Trial ID
  description: |
    If the data entity belongs to set of data_entities forming a trial,
    they have to be linked to the same trial_id. This can be used to e.g. group stimulation and response records.
    The optional `trial_type` events.tsv column can be used to provide the further information on the trial like
    `electric stimulation`,`rest`, or `pharmaceutical stimulation`, etc.
  type: string
trial_type:
  name: trial_type
  display_name: Trial type
  description: |
    Primary categorisation of each trial to identify them as instances of the
    experimental conditions.
    For example: for a response inhibition task, it could take on values `go` and
    `no-go` to refer to response initiation and response inhibition experimental
    conditions.
  type: string
trigger:
  name: trigger
  display_name: Trigger
  description: |
    continuous measurement of the scanner trigger signal
  type: number
# TODO: Populate enums that make sense for channels in the microephys datasets.
# type column in channels.tsv files
type__channels:
  name: type
  display_name: Channel type
  description: |
    Type of channel; MUST use the channel types listed below.
    Note that the type MUST be in upper-case.
  type: string
  enum:
    - $ref: objects.enums.ACCEL.value
    - $ref: objects.enums.ADC.value
    - $ref: objects.enums.ANGACCEL.value
    - $ref: objects.enums.AUDIO.value
    - $ref: objects.enums.DAC.value
    - $ref: objects.enums.DBS.value
    - $ref: objects.enums.ECG.value
    - $ref: objects.enums.ECOG.value
    - $ref: objects.enums.EEG.value
    - $ref: objects.enums.EMG.value
    - $ref: objects.enums.EOG.value
    - $ref: objects.enums.EYEGAZE.value
    - $ref: objects.enums.FITERR.value
    - $ref: objects.enums.GSR.value
    - $ref: objects.enums.GYRO.value
    - $ref: objects.enums.HEOG.value
    - $ref: objects.enums.HLU.value
    - $ref: objects.enums.JNTANG.value
    - $ref: objects.enums.LATENCY.value
    - $ref: objects.enums.MAGN.value
    - $ref: objects.enums.MEGGRADAXIAL.value
    - $ref: objects.enums.MEGGRADPLANAR.value
    - $ref: objects.enums.MEGMAG.value
    - $ref: objects.enums.MEGOTHER.value
    - $ref: objects.enums.MEGREFGRADAXIAL.value
    - $ref: objects.enums.MEGREFGRADPLANAR.value
    - $ref: objects.enums.MEGREFMAG.value
    - $ref: objects.enums.MISC.value
    - $ref: objects.enums.NIRSCWAMPLITUDE.value
    - $ref: objects.enums.NIRSCWFLUORESCENSEAMPLITUDE.value
    - $ref: objects.enums.NIRSCWHBO.value
    - $ref: objects.enums.NIRSCWHBR.value
    - $ref: objects.enums.NIRSCWMUA.value
    - $ref: objects.enums.NIRSCWOPTICALDENSITY.value
    - $ref: objects.enums.ORNT.value
    - $ref: objects.enums.OTHER.value
    - $ref: objects.enums.PD.value
    - $ref: objects.enums.POS.value
    - $ref: objects.enums.PPG.value
    - $ref: objects.enums.PUPIL.value
    - $ref: objects.enums.REF.value
    - $ref: objects.enums.RESP.value
    - $ref: objects.enums.SEEG.value
    - $ref: objects.enums.SYSCLOCK.value
    - $ref: objects.enums.TEMP.value
    - $ref: objects.enums.TRIG.value
    - $ref: objects.enums.VEL.value
    - $ref: objects.enums.VEOG.value
# type column for electrodes.tsv files
type__electrodes:
  name: type
  display_name: Electrode type
  description: |
    Type of the electrode (for example, cup, ring, clip-on, wire, needle).
  type: string
type__optodes:
  name: type
  display_name: Type
  description: |
    The type of the optode.
  type: string
  enum:
    - $ref: objects.enums.source.value
    - $ref: objects.enums.detector.value
    - n/a
type__probes:
  name: type
  display_name: Type
  description: |
    The type of the probe.
  type: string
units:
  name: units
  display_name: Units
  description: |
    Physical unit of the value represented in this channel,
    for example, `V` for Volt, or `fT/cm` for femto Tesla per centimeter
    (see [Units](SPEC_ROOT/common-principles.md#units)).
  type: string
  format: unit
units__channels:
  name: units
  display_name: Units
  description: |
    Physical unit of the value represented in this channel,
    for example, `V` for Volt, or `uV` for micro Volt
    (see [Units](SPEC_ROOT/common-principles.md#units)).
  type: string
  format: unit
units__nirs:
  name: units
  display_name: Units
  description: |
    Physical unit of the value represented in this channel,
    specified according to the SI unit symbol and possibly prefix symbol,
    or as a derived SI unit (for example, `V`, or unitless for changes in optical densities).
    For guidelines about units see the [Appendix](SPEC_ROOT/appendices/units.md)
    and [Common Principles](SPEC_ROOT/common-principles.md#units) pages.
  type: string
  format: unit
units__motion:
  name: units
  display_name: Units
  description: |
    Physical or virtual unit of the value represented in this channel,
    for example, '"rad"' or '"deg"' for angular quantities or '"m"' for position data.
    If motion data is recorded in a virtual space and deviate from standard SI units,
    the unit used MUST be specified in the sidecar `*_motion.json`
    file (for example `"vm"` for virtual meters). `"rad"` is used for Euler angles
    and `"n/a"` for quaternions.
    For guidelines about units see the [Appendix](SPEC_ROOT/appendices/units.md)
    and [Common Principles](SPEC_ROOT/common-principles.md#units) pages.
  type: string
  format: unit
volume_type:
  name: volume_type
  display_name: ASL volume type
  description: |
    The `*_aslcontext.tsv` table consists of a single column of labels identifying
    the `volume_type` of each volume in the corresponding `*_asl.nii[.gz]` file.
  type: string
  enum:
    - $ref: objects.enums.control.value
    - $ref: objects.enums.label.value
    - $ref: objects.enums.m0scan.value
    - $ref: objects.enums.deltam.value
    - $ref: objects.enums.cbf.value
wavelength_nominal:
  name: wavelength_nominal
  display_name: Wavelength nominal
  description: |
    Specified wavelength of light in nm.
    `n/a` for channels that do not contain raw NIRS signals (for example, acceleration).
    This field is equivalent to `/nirs(i)/probe/wavelengths` in the SNIRF specification.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
wavelength_actual:
  name: wavelength_actual
  display_name: Wavelength actual
  description: |
    Measured wavelength of light in nm.
    `n/a` for channels that do not contain raw NIRS signals (acceleration).
    This field is equivalent to `measurementList.wavelengthActual` in the SNIRF specification.
  type: number
wavelength_emission_actual:
  name: wavelength_emission_actual
  display_name: Wavelength emission actual
  description: |
    Measured emission wavelength of light in nm.
    `n/a` for channels that do not contain raw NIRS signals (acceleration).
    This field is equivalent to `measurementList.wavelengthEmissionActual` in the SNIRF specification.
  type: number
whole_blood_radioactivity:
  name: whole_blood_radioactivity
  display_name: Whole blood radioactivity
  description: |
    Radioactivity in whole blood samples,
    in unit of radioactivity measurements in whole blood samples (for example, `kBq/mL`).
  type: number
width__probes:
  name: width
  display_name: Width
  description: |
    Physical width of the probe, for example, '5'.
    This dimension corresponds to the xâ€™axis of the Euler transformation defined by
    alpha, beta and gamma rotations values.
  type: number
x:
  name: x
  display_name: X position
  description: |
    Recorded position along the x-axis.
  type: number
y:
  name: y
  display_name: Y position
  description: |
    Recorded position along the y-axis.
  type: number
z:
  name: z
  display_name: Z position
  description: |
    Recorded position along the z-axis.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
x__optodes:
  name: x
  display_name: X position
  description: |
    Recorded position along the x-axis.
    `"n/a"` if not available.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
y__optodes:
  name: y
  display_name: Y position
  description: |
    Recorded position along the y-axis.
    `"n/a"` if not available.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
z__optodes:
  name: z
  display_name: Z position
  description: |
    Recorded position along the z-axis.
    `"n/a"` if not available.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
# TODO: How are the units specified for the probe x, y and z fields?
x__probes:
  name: x
  display_name: Probe X position
  description: |
    Probe position along the global coordinate system x-axis.
  type: number
y__probes:
  name: y
  display_name: Probe Y position
  description: |
    Probe position along the global coordinate system y-axis.
  type: number
z__probes:
  name: z
  display_name: Probe Z position
  description: |
    Probe position along the global coordinate system z-axis.
  type: number
x__electrodes:
  name: x
  display_name: Electrode X position
  description: |
    Recorded position along the local width-axis relative
    to the probe origin and rotation (see `_probes.tsv`)
  type: number
y__electrodes:
  name: y
  display_name: Electrode Y position
  description: |
    Recorded position along the local height-axis relative
    to the probe origin and rotation (see `_probes.tsv`)
  type: number
z__electrodes:
  name: z
  display_name: Electrode Z position
  description: |
    Recorded position along the local depth-axis relative
    to the probe origin and rotation (see `_probes.tsv`)
  type: number
template_x:
  name: template_x
  display_name: X template position
  description: |
    Assumed or ideal position along the x axis.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
template_y:
  name: template_y
  display_name: Y template position
  description: |
    Assumed or ideal position along the y axis.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
template_z:
  name: template_z
  display_name: Z template position
  description: |
    Assumed or ideal position along the z axis.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
