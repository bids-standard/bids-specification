---
HED:
  name: HED
  display_name: HED Tag
  description: |
    Hierarchical Event Descriptor (HED) Tag.
    See the [HED Appendix](SPEC_ROOT/appendices/hed.md) for details.
  type: string
abbreviation:
  name: abbreviation
  display_name: Abbreviation
  description: |
    The unique label abbreviation
  type: string
acq_time__scans:
  name: acq_time
  display_name: Scan acquisition time
  description: |
    Acquisition time refers to when the first data point in each run was acquired.
    Furthermore, if this header is provided, the acquisition times of all files
    from the same recording MUST be identical.
    Datetime format and their anonymization are described in
    [Units](SPEC_ROOT/02-common-principles.md#units).
  type: string
  format: datetime
acq_time__sessions:
  name: acq_time
  display_name: Session acquisition time
  description: |
    Acquisition time refers to when the first data point of the first run was acquired.
    Datetime format and their anonymization are described in
    [Units](SPEC_ROOT/02-common-principles.md#units).
  type: string
  format: datetime
age:
  name: age
  display_name: Subject age
  description: |
    Numeric value in years (float or integer value).
  type: number
  unit: year
cardiac:
  name: cardiac
  display_name: Cardiac measurement
  description: |
    continuous pulse measurement
  type: number
color:
  name: color
  display_name: Color label
  description: |
    Hexadecimal. Label color for visualization.
  type: string
  unit: hexadecimal
detector__channels:
  name: detector
  display_name: Detector Name
  description: |
    Name of the detector as specified in the `*_optodes.tsv` file.
    `n/a` for channels that do not contain NIRS signals (for example, acceleration).
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
detector_type:
  name: detector_type
  display_name: Detector Type
  description: |
    The type of detector. Only to be used if the field `DetectorType` in `*_nirs.json` is set to `mixed`.
  anyOf:
    - type: string
derived_from:
  name: derived_from
  display_name: Derived from
  description: |
    `sample-<label>` entity from which a sample is derived,
    for example a slice of tissue (`sample-02`) derived from a block of tissue (`sample-01`).
  type: string
  pattern: ^sample-[0-9a-zA-Z]+$
description:
  name: description
  display_name: Description
  description: |
    Brief free-text description of the channel, or other information of interest.
  type: string
description__optode:
  name: description
  display_name: Description
  description: |
    Free-form text description of the optode, or other information of interest.
  type: string
dimension:
  name: dimension
  display_name: Dimension
  description: |
    Size of the group (grid/strip/probe) that this electrode belongs to.
    Must be of form `[AxB]` with the smallest dimension first (for example, `[1x8]`).
  type: string
duration:
  name: duration
  display_name: Event duration
  description: |
    Duration of the event (measured from onset) in seconds.
    Must always be either zero or positive (or `n/a` if unavailable).
    A "duration" value of zero implies that the delta function or event is so
    short as to be effectively modeled as an impulse.
  anyOf:
    - type: number
      unit: s
      minimum: 0
    - type: string
      enum:
        - n/a
filename:
  name: filename
  display_name: Filename
  description: |
    Relative paths to files.
  type: string
  format: participant_relative
group__channel:
  name: group
  display_name: Channel group
  description: |
    Which group of channels (grid/strip/seeg/depth) this channel belongs to.
    This is relevant because one group has one cable-bundle and noise can be shared.
    This can be a name or number.
  anyOf:
    - type: string
    - type: number
handedness:
  name: handedness
  display_name: Subject handedness
  description: |
    String value indicating one of "left", "right", "ambidextrous".

    For "left", use one of these values: `left`, `l`, `L`, `LEFT`, `Left`.

    For "right", use one of these values: `right`, `r`, `R`, `RIGHT`, `Right`.

    For "ambidextrous", use one of these values: `ambidextrous`, `a`, `A`, `AMBIDEXTROUS`,
    `Ambidextrous`.
  type: string
  enum:
    - left
    - l
    - L
    - LEFT
    - Left
    - right
    - r
    - R
    - RIGHT
    - Right
    - ambidextrous
    - a
    - A
    - AMBIDEXTROUS
    - Ambidextrous
    - n/a
hemisphere:
  name: hemisphere
  display_name: Electrode hemisphere
  description: |
    The hemisphere in which the electrode is placed.
  type: string
  enum:
    - L
    - R
high_cutoff:
  name: high_cutoff
  display_name: High cutoff
  description: |
    Frequencies used for the low-pass filter applied to the channel in Hz.
    If no low-pass filter applied, use `n/a`.
    Note that hardware anti-aliasing in A/D conversion of all MEG/EEG electronics
    applies a low-pass filter; specify its frequency here if applicable.
  anyOf:
    - type: number
      unit: Hz
      minimum: 0
    - type: string
      enum:
        - n/a
hplc_recovery_fractions:
  name: hplc_recovery_fractions
  display_name: HPLC recovery fractions
  description: |
    HPLC recovery fractions (the fraction of activity that gets loaded onto the HPLC).
  type: number
  unit: arbitrary
impedance:
  name: impedance
  display_name: Electrode impedance
  description: |
    Impedance of the electrode, units MUST be in `kOhm`.
  type: number
  unit: kOhm
index:
  name: index
  display_name: Label index
  description: |
    The label integer index.
  type: integer
low_cutoff:
  name: low_cutoff
  display_name: Low cutoff
  description: |
    Frequencies used for the high-pass filter applied to the channel in Hz.
    If no high-pass filter applied, use `n/a`.
  anyOf:
    - type: number
      unit: Hz
    - type: string
      enum:
        - n/a
manufacturer:
  name: manufacturer
  display_name: Manufacturer
  description: |
    The manufacturer for each electrode.
    Can be used if electrodes were manufactured by more than one company.
  type: string
mapping:
  name: mapping
  display_name: Label mapping
  description: |
    Corresponding integer label in the standard BIDS label lookup.
  type: integer
material:
  name: material
  display_name: Electrode material
  description: |
    Material of the electrode (for example, `Tin`, `Ag/AgCl`, `Gold`).
  type: string
metabolite_parent_fraction:
  name: metabolite_parent_fraction
  display_name: Metabolite parent fraction
  description: |
    Parent fraction of the radiotracer (0-1).
  type: number
  minimum: 0
  maximum: 1
metabolite_polar_fraction:
  name: metabolite_polar_fraction
  display_name: Metabolite polar fraction
  description: |
    Polar metabolite fraction of the radiotracer (0-1).
  type: number
  minimum: 0
  maximum: 1
# name column for channels.tsv files
name__channels:
  name: name
  display_name: Channel name
  description: |
    Label of the channel.
  type: string
# name column for electrodes.tsv files
name__electrodes:
  name: name
  display_name: Electrode name
  description: |
    Name of the electrode contact point.
  type: string
name__optodes:
  name: name
  display_name: Optode name
  description: |
    Name of the optode, must be unique.
  type: string
# name column for dseg.tsv files
name__segmentations:
  name: name
  display_name: Label name
  description: |
    The unique label name.
  type: string
notch:
  name: notch
  display_name: Notch frequencies
  description: |
    Frequencies used for the notch filter applied to the channel, in Hz.
    If no notch filter applied, use `n/a`.
  anyOf:
    - type: number
      unit: Hz
    - type: string
      enum:
        - n/a
onset:
  name: onset
  display_name: Event onset
  description: |
    Onset (in seconds) of the event, measured from the beginning of the acquisition
    of the first data point stored in the corresponding task data file.
    Negative onsets are allowed, to account for events that occur prior to the first
    stored data point.
    For example, in case there is an in-scanner training phase that begins before
    the scanning sequence has started events from this sequence should have
    negative onset time counting down to the beginning of the acquisition of the
    first volume.

    If any data points have been discarded before forming the data file
    (for example, "dummy volumes" in BOLD fMRI),
    a time of 0 corresponds to the first stored data point and not the first
    acquired data point.
  type: number
  unit: s
orientation_component:
  name: orientation_component
  display_name: Orientation Component
  description: |
    Description of the orientation of the channel.
  type: string
  enum:
    - x
    - y
    - z
pathology:
  name: pathology
  display_name: Pathology
  description: |
    String value describing the pathology of the sample or type of control.
    When different from `healthy`, pathology SHOULD be specified.
    The pathology may be specified in either `samples.tsv` or
    `sessions.tsv`, depending on whether the pathology changes over time.
  type: string
participant_id:
  name: participant_id
  display_name: Participant ID
  description: |
    A participant identifier of the form `sub-<label>`,
    matching a participant entity found in the dataset.
  type: string
  pattern: ^sub-[0-9a-zA-Z]+$
plasma_radioactivity:
  name: plasma_radioactivity
  display_name: Plasma radioactivity
  description: |
    Radioactivity in plasma, in unit of plasma radioactivity (for example, `kBq/mL`).
  type: number
# reference column for channels.tsv files for EEG data
reference__eeg:
  name: reference
  display_name: Electrode reference
  description: |
    Name of the reference electrode(s).
    This column is not needed when it is common to all channels.
    In that case the reference electrode(s) can be specified in `*_eeg.json` as `EEGReference`).
  type: string
# reference column for channels.tsv files for iEEG data
reference__ieeg:
  name: reference
  display_name: Electrode reference
  description: |
    Specification of the reference (for example, `mastoid`, `ElectrodeName01`, `intracranial`, `CAR`, `other`, `n/a`).
    If the channel is not an electrode channel (for example, a microphone channel) use `n/a`.
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
respiratory:
  name: respiratory
  display_name: Respiratory measurement
  description: |
    continuous breathing measurement
  type: number
response_time:
  name: response_time
  display_name: Response time
  description: |
    Response time measured in seconds.
    A negative response time can be used to represent preemptive responses and
    `n/a` denotes a missed response.
  anyOf:
    - type: number
      unit: s
    - type: string
      enum:
        - n/a
sample:
  name: sample
  display_name: Sample index
  description: |
    Onset of the event according to the sampling scheme of the recorded modality
    (that is, referring to the raw data file that the `events.tsv` file accompanies).
    When there are several sampling schemes present in the raw data file (as can be
    the case for example for `.edf` files), this column is ambiguous and
    SHOULD NOT be used.
  type: integer
sample_id:
  name: sample_id
  display_name: Sample ID
  description: |
    A sample identifier of the form `sample-<label>`,
    matching a sample entity found in the dataset.
  type: string
  pattern: ^sample-[0-9a-zA-Z]+$
sample_type:
  name: sample_type
  display_name: Sample type
  description: |
    Biosample type defined by
    [ENCODE Biosample Type](https://www.encodeproject.org/profiles/biosample_type).
  type: string
  enum:
    - cell line
    - in vitro differentiated cells
    - primary cell
    - cell-free sample
    - cloning host
    - tissue
    - whole organisms
    - organoid
    - technical sample
sampling_frequency:
  name: sampling_frequency
  display_name: Channel sampling frequency
  description: |
    Sampling rate of the channel in Hz.
  type: number
  unit: Hz
session_id:
  name: session_id
  display_name: Session ID
  description: |
    A session identifier of the form `ses-<label>`,
    matching a session found in the dataset.
  type: string
  pattern: ^ses-[0-9a-zA-Z]+$
sex:
  name: sex
  display_name: Sex
  description: |
    String value indicating phenotypical sex, one of "male", "female", "other".

    For "male", use one of these values: `male`, `m`, `M`, `MALE`, `Male`.

    For "female", use one of these values: `female`, `f`, `F`, `FEMALE`, `Female`.

    For "other", use one of these values: `other`, `o`, `O`, `OTHER`, `Other`.
  type: string
  enum:
    - male
    - m
    - M
    - MALE
    - Male
    - female
    - f
    - F
    - FEMALE
    - Female
    - other
    - o
    - O
    - OTHER
    - Other
    - n/a
short_channel:
  name: short_channel
  display_name: Short Channel
  description: |
    Is the channel designated as short.
    The total number of channels listed as short channels
    SHOULD be stored in `ShortChannelCount` in `*_nirs.json`.
  type: boolean
size:
  name: size
  display_name: Electrode size
  description: |
    Surface area of the electrode, units MUST be in `mm^2`.
  type: number
  unit: 'mm^2'
software_filters:
  name: software_filters
  display_name: Software filters
  description: |
    List of temporal and/or spatial software filters applied
    (for example, `SSS`, `SpatialCompensation`).
    Note that parameters should be defined in the general MEG sidecar .json file.
    Indicate `n/a` in the absence of software filters applied.
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
source__channels:
  name: source
  display_name: Source name
  description: |
    Name of the source as specified in the `*_optodes.tsv` file.
    `n/a` for channels that do not contain fNIRS signals (for example, acceleration).
  anyOf:
    - type: string
    - type: string
      enum:
        - n/a
source__optodes:
  name: source_type
  display_name: Source type
  description: |
    The type of source. Only to be used if the field `SourceType` in `*_nirs.json` is set to `mixed`.
  anyOf:
    - type: string
species:
  name: species
  display_name: Species
  description: |
    The `species` column SHOULD be a binomial species name from the
    [NCBI Taxonomy](https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi)
    (for example, `homo sapiens`, `mus musculus`, `rattus norvegicus`).
    For backwards compatibility, if `species` is absent, the participant is assumed to be
    `homo sapiens`.
  type: string
status:
  name: status
  display_name: Channel status
  description: |
    Data quality observed on the channel.
    A channel is considered `bad` if its data quality is compromised by excessive noise.
    If quality is unknown, then a value of `n/a` may be used.
    Description of noise type SHOULD be provided in `[status_description]`.
  type: string
  enum:
    - good
    - bad
    - n/a
status_description:
  name: status_description
  display_name: Channel status description
  description: |
    Freeform text description of noise or artifact affecting data quality on the channel.
    It is meant to explain why the channel was declared bad in the `status` column.
  type: string
stim_file:
  name: stim_file
  display_name: Stimulus file
  description: |
    Represents the location of the stimulus file (such as an image, video, or
    audio file) presented at the given onset time.
    There are no restrictions on the file formats of the stimuli files,
    but they should be stored in the `/stimuli` directory
    (under the root directory of the dataset; with optional subdirectories).
    The values under the `stim_file` column correspond to a path relative to
    `/stimuli`.
    For example `images/cat03.jpg` will be translated to `/stimuli/images/cat03.jpg`.
  type: string
  format: stimuli_relative
strain:
  name: strain
  display_name: Strain
  description: |
    For species different from `homo sapiens`, string value indicating
    the strain of the species, for example: `C57BL/6J`.
  type: string
strain_rrid:
  name: strain_rrid
  display_name: Strain RRID
  description: |
    For species different from `homo sapiens`, research resource identifier
    ([RRID](https://scicrunch.org/resources/Organisms/search))
    of the strain of the species, for example: `RRID:IMSR_JAX:000664`.
  type: string
  format: rrid
time:
  name: time
  display_name: Time
  description: |
    Time, in seconds, relative to `TimeZero` defined by the `*_pet.json`.
    For example, 5.
  type: number
  unit: s
trial_type:
  name: trial_type
  display_name: Trial type
  description: |
    Primary categorisation of each trial to identify them as instances of the
    experimental conditions.
    For example: for a response inhibition task, it could take on values `go` and
    `no-go` to refer to response initiation and response inhibition experimental
    conditions.
  type: string
trigger:
  name: trigger
  display_name: Trigger
  description: |
    continuous measurement of the scanner trigger signal
  type: number
# type column in channels.tsv files
type__eeg_channels:
  name: type
  display_name: Channel type
  description: |
    Type of channel; MUST use the channel types listed below.
    Note that the type MUST be in upper-case.
  type: string
  enum:
    - AUDIO
    - EEG
    - EOG
    - ECG
    - EMG
    - EYEGAZE
    - GSR
    - HEOG
    - MISC
    - PPG
    - PUPIL
    - REF
    - RESP
    - SYSCLOCK
    - TEMP
    - TRIG
    - VEOG
type__meg_channels:
  name: type
  display_name: Channel type
  description: |
    Type of channel; MUST use the channel types listed below.
    Note that the type MUST be in upper-case.
  type: string
  enum:
    - MEGMAG
    - MEGGRADAXIAL
    - MEGGRADPLANAR
    - MEGREFMAG
    - MEGREFGRADAXIAL
    - MEGREFGRADPLANAR
    - MEGOTHER
    - EEG
    - ECOG
    - SEEG
    - DBS
    - VEOG
    - HEOG
    - EOG
    - ECG
    - EMG
    - TRIG
    - AUDIO
    - PD
    - EYEGAZE
    - PUPIL
    - MISC
    - SYSCLOCK
    - ADC
    - DAC
    - HLU
    - FITERR
    - OTHER
type__ieeg_channels:
  name: type
  display_name: Channel type
  description: |
    Type of channel; MUST use the channel types listed below.
    Note that the type MUST be in upper-case.
  type: string
  enum:
    - EEG
    - ECOG
    - SEEG
    - DBS
    - VEOG
    - HEOG
    - EOG
    - ECG
    - EMG
    - TRIG
    - AUDIO
    - PD
    - EYEGAZE
    - PUPIL
    - MISC
    - SYSCLOCK
    - ADC
    - DAC
    - REF
    - OTHER
type__nirs_channels:
  name: type
  display_name: Channel type
  description: |
    Type of channel; MUST use the channel types listed below.
    Note that the type MUST be in upper-case.
  type: string
  enum:
    - NIRSCWAMPLITUDE
    - NIRSCWFLUORESCENSEAMPLITUDE
    - NIRSCWOPTICALDENSITY
    - NIRSCWHBO
    - NIRSCWHBR
    - NIRSCWMUA
    - MEGMAG
    - MEGGRADAXIAL
    - MEGGRADPLANAR
    - MEGREFMAG
    - MEGREFGRADAXIAL
    - MEGREFGRADPLANAR
    - MEGOTHER
    - EEG
    - ECOG
    - SEEG
    - DBS
    - VEOG
    - HEOG
    - EOG
    - ECG
    - EMG
    - TRIG
    - AUDIO
    - PD
    - EYEGAZE
    - PUPIL
    - MISC
    - SYSCLOCK
    - ADC
    - DAC
    - HLU
    - FITERR
    - ACCEL
    - GYRO
    - MAGN
    - MISC
    - OTHER
# type column for electrodes.tsv files
type__electrodes:
  name: type
  display_name: Electrode type
  description: |
    Type of the electrode (for example, cup, ring, clip-on, wire, needle).
  type: string
type__optodes:
  name: type
  display_name: Type
  description: |
    The type of the optode.
  type: string
  enum:
    - source
    - detector
    - n/a
units:
  name: units
  display_name: Units
  description: |
    Physical unit of the value represented in this channel,
    for example, `V` for Volt, or `fT/cm` for femto Tesla per centimeter
    (see [Units](SPEC_ROOT/02-common-principles.md#units)).
  type: string
  format: unit
units__nirs:
  name: units
  display_name: Units
  description: |
    Physical unit of the value represented in this channel,
    specified according to the SI unit symbol and possibly prefix symbol,
    or as a derived SI unit (for example, `V`, or unitless for changes in optical densities).
    For guidelines about units see the [Appendix](SPEC_ROOT/appendices/units.md)
    and [Common Principles](SPEC_ROOT/02-common-principles.md#units) pages.
  type: string
  format: unit
value:
  name: value
  display_name: Marker value
  description: |
    Marker value associated with the event (for example, the value of a TTL
    trigger that was recorded at the onset of the event).
  anyOf:
    - type: number
    - type: string
volume_type:
  name: volume_type
  display_name: ASL volume type
  description: |
    The `*_aslcontext.tsv` table consists of a single column of labels identifying
    the `volume_type` of each volume in the corresponding `*_asl.nii[.gz]` file.
  type: string
  enum:
    - control
    - label
    - m0scan
    - deltam
    - cbf
wavelength_nominal:
  name: wavelength_nominal
  display_name: Wavelength nominal
  description: |
    Specified wavelength of light in nm.
    `n/a` for channels that do not contain raw NIRS signals (for example, acceleration).
    This field is equivalent to `/nirs(i)/probe/wavelengths` in the SNIRF specification.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
wavelength_actual:
  name: wavelength_actual
  display_name: Wavelength actual
  description: |
    Measured wavelength of light in nm.
    `n/a` for channels that do not contain raw NIRS signals (acceleration).
    This field is equivalent to `measurementList.wavelengthActual` in the SNIRF specification.
  type: number
wavelength_emission_actual:
  name: wavelength_emission_actual
  display_name: Wavelength emission actual
  description: |
    Measured emission wavelength of light in nm.
    `n/a` for channels that do not contain raw NIRS signals (acceleration).
    This field is equivalent to `measurementList.wavelengthEmissionActual` in the SNIRF specification.
  type: number
whole_blood_radioactivity:
  name: whole_blood_radioactivity
  display_name: Whole blood radioactivity
  description: |
    Radioactivity in whole blood samples,
    in unit of radioactivity measurements in whole blood samples (for example, `kBq/mL`).
  type: number
x:
  name: x
  display_name: X position
  description: |
    Recorded position along the x-axis.
  type: number
y:
  name: y
  display_name: Y position
  description: |
    Recorded position along the y-axis.
  type: number
z:
  name: z
  display_name: Z position
  description: |
    Recorded position along the z-axis.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
x__optodes:
  name: x
  display_name: X position
  description: |
    Recorded position along the x-axis.
    `"n/a"` if not available.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
y__optodes:
  name: y
  display_name: Y position
  description: |
    Recorded position along the y-axis.
    `"n/a"` if not available.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
z__optodes:
  name: z
  display_name: Z position
  description: |
    Recorded position along the z-axis.
    `"n/a"` if not available.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
template_x:
  name: template_x
  display_name: X template position
  description: |
    Assumed or ideal position along the x axis.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
template_y:
  name: template_y
  display_name: Y template position
  description: |
    Assumed or ideal position along the y axis.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
template_z:
  name: template_z
  display_name: Z template position
  description: |
    Assumed or ideal position along the z axis.
  anyOf:
    - type: number
    - type: string
      enum:
        - n/a
